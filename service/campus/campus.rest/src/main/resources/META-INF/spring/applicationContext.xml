<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    ">

	<context:property-placeholder location="classpath:db.properties" />

	<context:component-scan base-package="org.campus">
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.RestController" />
		<context:exclude-filter type="annotation"
			expression="com.mangofactory.swagger.plugin.EnableSwagger" />
	</context:component-scan>

	<context:annotation-config />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.userName}" />
		<property name="password" value="${db.password}" />
		<property name="driverClassName" value="${db.driver}" />
		<property name="maxActive" value="${db.maxActive}" />
		<property name="initialSize" value="${db.initialSize}" />
		<property name="maxWait" value="${db.maxActive}" />
		<property name="minIdle" value="${db.minIdle}" />
		<property name="validationQuery" value="${db.validationQuery}" />
		<property name="testWhileIdle" value="${db.testWhileIdle}" />
		<property name="testOnBorrow" value="${db.testOnBorrow}" />
		<property name="testOnReturn" value="${db.testOnReturn}" />
		<property name="removeAbandoned" value="${db.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
	</bean>

	<bean id="mybatisTypeHandlerScanner" class="org.campus.core.mybatis.typeHandler.TypeHandlerScanner" />

	<bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/META-INF/mybatis/mybatis.xml" />
		<property name="mapperLocations" value="classpath*:/META-INF/mybatis/**/*Mapper.xml" />
		<property name="typeHandlers"
			value="#{mybatisTypeHandlerScanner.getTypeHandlers('org.campus.repository.typehandler')}" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.campus.repository" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" /><!--最大空闲数 -->
		<property name="maxTotal" value="${redis.maxTotal}" /><!--最大连接数 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" /><!--最大等待时间ms -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" /><!--是否提前进行validate操作 -->
	</bean>

	<bean id="cacheConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="database" value="${redis.dbIndex}" />
		<property name="poolConfig" ref="redisPoolConfig" />
	</bean>

	<bean id="cacheTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="cacheConnectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>

	<!-- 数据库事务配置开始 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice transaction-manager="transactionManager"
		id="txAdvice">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="txMethods"
			expression="execution(* org.campus.service.*.*(..))" />
		<aop:advisor pointcut-ref="txMethods" advice-ref="txAdvice" />
	</aop:config>
	<!-- 数据库事务配置结束 -->
	
	<bean id="messageFilePathList" class="org.campus.config.ConfigurationLoader" factory-method="getMessageFilePathList"/>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" ref="messageFilePathList"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

</beans>